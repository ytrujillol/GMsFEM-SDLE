//Se va a solucionar -△u=f, con f=1, en D=[0,1]×[0,1], con u=0 en ∂D.
// Parameters
int inside = 2; 
int outside = 1;
real d=0.1;
func f = x + x^2 - 2*x^3 + y + 8*x*y - 4*x^2*y + y^2 - 4*x*y^2 - 2*y^3;
func g=0;       //  boundary condition function
func usol = x*(1-x)*y*(1-y);
func dxusol = y*(1-y)*(1-2*x);
func dyusol = x*(1-x)*(1-2*y);
real rate = 0; //Convergence rate

int n = 2, k = 50; // n = number of refinements, points = # of points in each borders
real[int] L2error(n), H1error(n);
real[int] Ntraingles(n), Msize(n);
real auxH1, auxL2, auxH1sol, auxL2sol;
string namefile;

//Mesh
border b1(t=0, 1){x=t; y=0; label=outside;};
border b2(t=0, 1){x=1; y=t;label=outside;};
border b3(t=1,0){x=t; y=1;label=outside;};
border b4(t=0, 1){x=0; y=t;label=outside;};

mesh Th = buildmesh(b1(k) + b2(k) + b3(k) + b4(-k));
plot(Th, wait=true);

// Loop for refinements
for(int i = 0; i < n; i++){
    // Fespace
    fespace Vh(Th, P1);
    Vh  h = hTriangle;
    Msize[i] = h[].max;
    Vh u,v;
    // Problem
    solve smoothcrack(u, v)
    = int2d(Th)(dx(u)*dx(v) + dy(u)*dy(v))
    - int2d(Th)(f*v)
    + on(outside, u=g);
    plot(u, value=true, fill=true, wait=true);
    auxL2 = int2d(Th)((u - usol)^2);
    auxL2sol = int2d(Th)((usol)^2);
    auxH1 = int2d(Th)((dx(u) - dxusol)^2 + (dy(u) - dyusol)^2);
    auxH1sol = int2d(Th)((dxusol)^2 + (dyusol)^2);
    L2error[i] = sqrt(auxL2/auxL2sol);
    H1error[i] = sqrt(auxL2 + auxH1) / sqrt(auxL2sol + auxH1sol);
    Ntraingles[i] = Th.nt;
    Ntraingles[i] = Th.nt;
    cout << "L2Error\t" << L2error[i] << endl;
    Th = trunc(Th,1,split=2); //refine mesh
    plot(Th, wait=true);
  }
  //to build a data file
  {
    namefile = "dataP4"+".txt";
    ofstream ff(namefile);
    ff << "Number of Triangles\tIteration\tL2Error\tH1Error\tConvergnce rate\tMsize" << endl;
    for(int i = 0; i < n; i++){
        if(i > 0){
          rate = L2error[i-1]/L2error[i];
        }
      ff << Ntraingles[i] << "\t" << i << "\t" << L2error[i] << "\t" << H1error[i] << "\t"  << rate << "\t" << Msize[i]<<endl;
    }
  }